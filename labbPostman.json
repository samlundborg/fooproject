{
	"info": {
		"_postman_id": "6e1aee12-128d-42c0-adc8-b40c83c7054c",
		"name": "Restful Booker",
		"description": "## Overview\nThe Restful Booker API is a sample API based on hotel bookings. The API contains endpoints to demonstrate CRUD operations. The source code can be obtained from https://github.com/mwinteringham/restful-booker\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Get Auth Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"my_booker_token\", pm.response.json().token);",
									"",
									"pm.test(\"Status code is 200\", () => pm.expect(responseCode.code).to.equal(200));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Get auth token"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bookings",
			"item": [
				{
					"name": "Get Bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"length_array\", pm.response.json().length);",
									"",
									"pm.test(\"Status code is 200\" , function () {",
									"    pm.response.to.have.status(parseInt(pm.environment.get(\"status_code\")));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						},
						"description": "Get a list of all bookings"
					},
					"response": []
				},
				{
					"name": "Create new Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(parseInt(pm.environment.get(\"status_code\")));",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"bookingID\", pm.response.json().bookingid);",
									"",
									"pm.test(\"Check firstname of new Booking\", function () {",
									"    pm.expect(jsonData.booking.firstname).to.eql(pm.environment.get(\"first_name\"));",
									"});",
									"pm.test(\"Check lastname of new Booking\", function () {",
									"    pm.expect(jsonData.booking.lastname).to.eql(pm.environment.get(\"last_name\"));",
									"});",
									"pm.test(\"Check totalprice of new Booking\", function () {",
									"    pm.expect(jsonData.booking.totalprice).to.eql(parseInt(pm.environment.get(\"total_price\")));",
									"});",
									"pm.test(\"Check if depositpaid of new Booking\", function () {",
									"    pm.expect(jsonData.booking.depositpaid).to.eql(Boolean(pm.environment.get(\"deposit_paid\")));",
									"});",
									"pm.test(\"Check additionalneeds of new Booking\", function () {",
									"    pm.expect(jsonData.booking.additionalneeds).to.eql(pm.environment.get(\"additional_needs\"));",
									"});",
									"pm.test(\"Check checkin date of new Booking\", function () {",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.environment.get(\"check_in\"));",
									"});",
									"pm.test(\"Check checkout date of new Booking\", function () {",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.environment.get(\"check_out\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstname\" : \"{{first_name}}\",\r\n  \"lastname\" : \"{{last_name}}\",\r\n  \"totalprice\" : {{total_price}},\r\n  \"depositpaid\" : {{deposit_paid}},\r\n  \"additionalneeds\" : \"{{additional_needs}}\",\r\n  \"bookingdates\" : {\r\n    \"checkin\" : \"{{check_in}}\",\r\n    \"checkout\" : \"{{check_out}}\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if new booking in database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(parseInt(pm.environment.get(\"status_code\")));\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if list of bookings got bigger in the database\", function () {\r",
									"    pm.expect(pm.response.json().length).to.eql(pm.environment.get(\"length_array\")+1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/booking",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Booking by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(parseInt(pm.environment.get(\"status_code\")));\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check so request is not empty\", function () {\r",
									"    pm.expect(jsonData).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"Check firstname of requested Booking\", function () {\r",
									"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"first_name\"));\r",
									"});\r",
									"pm.test(\"Check lastname of requested Booking\", function () {\r",
									"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"last_name\"));\r",
									"});\r",
									"pm.test(\"Check totalprice of requested Booking\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.eql(parseInt(pm.environment.get(\"total_price\")));\r",
									"});\r",
									"pm.test(\"Check if depositpaid of requested Booking\", function () {\r",
									"    pm.expect(jsonData.depositpaid).to.eql(Boolean(pm.environment.get(\"deposit_paid\")));\r",
									"});\r",
									"pm.test(\"Check additionalneeds of requested Booking\", function () {\r",
									"    pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"additional_needs\"));\r",
									"});\r",
									"pm.test(\"Check checkin date of requested Booking\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"check_in\"));\r",
									"});\r",
									"pm.test(\"Check checkout date of requested Booking\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"check_out\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(parseInt(pm.environment.get(\"status_code\")));\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check firstname of updated Booking\", function () {\r",
									"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"put_first\"));\r",
									"});\r",
									"pm.test(\"Check lastname of updated Booking\", function () {\r",
									"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"put_last\"));\r",
									"});\r",
									"pm.test(\"Check totalprice of updated Booking\", function () {\r",
									"    pm.expect(jsonData.totalprice).to.eql(parseInt(pm.environment.get(\"put_price\")));\r",
									"});\r",
									"pm.test(\"Check checkin date of updated Booking\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"put_check_in\"));\r",
									"});\r",
									"pm.test(\"Check checkout date of updated Booking\", function () {\r",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"put_check_out\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "YWRtaW46cGFzc3dvcmQxMjM=]",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{put_first}}\",\r\n    \"lastname\" : \"{{put_last}}\",\r\n    \"totalprice\" : {{put_price}},\r\n    \"depositpaid\" : {{put_paid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{put_check_in}}\",\r\n        \"checkout\" : \"{{put_check_out}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{put_needs}}\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking (partial)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(parseInt(pm.environment.get(\"status_code\")));",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Bookings firstname is updated\", function () {",
									"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"patch_first\"));",
									"});",
									"",
									"pm.test(\"Bookings lastname is updated\", function () {",
									"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"patch_last\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{my_booker_token}}"
							},
							{
								"key": "Authorization",
								"value": "YWRtaW46cGFzc3dvcmQxMjM=]",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{patch_first}}\",\r\n    \"lastname\" : \"{{patch_last}}\" \r\n}"
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', () => pm.response.to.have.status(201));",
									"",
									"var url = pm.environment.get(\"url\") + \"/booking/\" +  pm.globals.get(\"bookingID\");",
									"",
									"const getRequest = {",
									"        url: url,",
									"        method: 'GET'",
									"};",
									"",
									"pm.sendRequest(getRequest, function (err, res) {",
									"    if (err) { ",
									"        console.log(err);",
									"    }",
									"    ",
									"    console.log(res);",
									"    ",
									"    pm.test('Response should be Not Found', function () {",
									"        pm.expect(res.status).to.include(\"Not Found\");",
									"    });",
									"    ",
									"    pm.test(\"Response code 404\", function() {",
									"        pm.expect(res.code).to.equal(404);",
									"    })",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{my_booker_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/booking/{{bookingID}}?=",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingID}}"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => pm.expect(responseCode.code).to.equal(201));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/ping",
							"host": [
								"{{url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"description": "All bookings requests "
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}